#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
require 'rubygems'
require 'gli'
require 'pp'
require 'date'
require 'chronic'
require 'fastercsv'
require 'date'
require "./lib/attask.rb"
require 'cgi'
#require 'activesupport/all'
include GLI::App

program_desc 'Program for synchronizing task'

desc 'Test'
command :test do |c|
  c.action do |global_options,options,args|
    attask = Attask.client("rgenerator","engapi@rgnrtr.com","M@k3itrain!")

    #project = attask.project
    #projects = project.getAllFields
    #project_id = "524af0310057ff1e29e9557243d20f36"
    #myTasks = project.myWork
    #proj_det = project.findById(project_id)
    #pp proj_det
  end
end

desc 'Projects'
command :projects do |c|
  c.action do |global_options, options, arg|
    attask = Attask.client("rgenerator","engapi@rgnrtr.com","M@k3itrain!")
    project = attask.project
    project_id = "524af0310057ff1e29e9557243d20f36"
    proj_det = project.findById(project_id)
    pp proj_det
  end
end

desc 'tasks'
command :tasks do |c|
  c.action do |global_options, options, arg|
    attask = Attask.client("rgenerator","engapi@rgnrtr.com","M@k3itrain!")
    task = attask.task
    issue = attask.issue
    options[:query] = {:"assignedTo:firstName" => "Skye", :status => "NEW", :fields => "ID,name,objCode,description,status", :"$$limit" => 500}
    all_tasks = task.search("/search", options)
    #pp all_tasks

    all_issues = issue.search("/search", options)
    pp all_issues
  end
end


pre do |global,command,options,args|
  next true if command.nil?
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this       id
  # block on that command only
end

on_error do |exception|
  pp exception.backtrace
  if exception.is_a?(SystemExit) && exception.status == 0
    false
  else
    pp exception.inspect

    false
  end

  # Error logic here
  # return false to skip default error handling
  # false
  # true
end

exit run(ARGV)
